#'
#' @examples
sourceR = function(source_dir = "R",
include_rmd = F,
exclude_dirs = "",
exclude_files = "",
recursive = T,
exclude_marked_exclude = T,
exclude_sourceR = T,
echo_files_sourced = T) {
sourcing_directory = file.path(source_dir)
R_scripts = list.files(
path = sourcing_directory,
all.files = T,
include.dirs = F,
pattern = ".R$",
recursive = recursive
)
rmd_scripts = list.files(
path = sourcing_directory,
all.files = T,
include.dirs = F,
pattern = ".Rmd$"
)
if (include_rmd) {
sources = append(R_scripts, rmd_scripts)
} else {
sources = R_scripts
}
if (all(exclude_files != "")) {
for (s in seq_along(exclude_files)) {
sources = sources[!grepl(exclude_files[[s]], sources)]
}
}
if(exclude_marked_exclude){sources = sources[!grepl("_exclude.[^.]*$", sources)]}
if(exclude_sourceR){sources = sources[!grepl("^sourceR.R$", sources)]}
for (i in seq_along(sources)) {
if(echo_files_sourced){
cat("sourcing script:", sources[i], "\n")}
suppressMessages(
source(
file.path(sourcing_directory, sources[i]),
local = knitr::knit_global(),
encoding = "UTF-8"
)
)
}
}
## eg.
# sourceR("R",exclude_files=c("sourceR.R"))
sourceR()
this_script = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
# source(file.path("R","sourceR.R"),local=knitr::knit_global());sourceR()
source(file.path("R","sourceR.R"));sourceR()
traceback()
#' sourceR
#' Source scripts selectively, recursively
#'
#' @param source_dir
#' @param include_rmd
#' @param exclude_dirs
#' @param exclude_files
#' @param recursive
#' @param exclude_marked_exclude
#' @param exclude_sourceR
#'
#' @return
#' @export
#'
#' @examples
sourceR = function(source_dir = "R",
include_rmd = F,
exclude_dirs = "",
exclude_files = "",
recursive = T,
exclude_marked_exclude = T,
exclude_sourceR = T,
echo_files_sourced = T
) {
sourcing_directory = file.path(source_dir)
R_scripts = list.files(
path = sourcing_directory,
all.files = T,
include.dirs = F,
pattern = ".R$",
recursive = recursive
)
rmd_scripts = list.files(
path = sourcing_directory,
all.files = T,
include.dirs = F,
pattern = ".Rmd$"
)
if (include_rmd) {
sources = append(R_scripts, rmd_scripts)
} else {
sources = R_scripts
}
if (all(exclude_files != "")) {
for (s in seq_along(exclude_files)) {
sources = sources[!grepl(exclude_files[[s]], sources)]
}
}
if(exclude_marked_exclude){sources = sources[!grepl("_exclude.[^.]*$", sources)]}
if(exclude_sourceR){sources = sources[!grepl("^sourceR.R$", sources)]}
for (i in seq_along(sources)) {
if(echo_files_sourced){
cat("sourcing script:", sources[i], "\n")}
suppressMessages(
source(
file.path(sourcing_directory, sources[i]),
local = knitr::knit_global(),
encoding = "UTF-8"
)
)
}
}
## eg.
# sourceR("R",exclude_files=c("sourceR.R"))
this_script = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
# source(file.path("R","sourceR.R"),local=knitr::knit_global());sourceR()
source(file.path("R","sourceR.R"));sourceR()
this_script = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
# source(file.path("R","sourceR.R"),local=knitr::knit_global());sourceR()
source(file.path("R","sourceR.R"));sourceR()
#___ Load Packages ____
source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
this_script = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
source(file.path("R","sourceR.R"));sourceR(); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
source(file.path("R","sourceR.R"));sourceR(); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
this_script = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
source(file.path("R","sourceR.R"));sourceR(); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
pkg = c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse")
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
length(new.pkg)
suppressMessages( install.packages(new.pkg, dependencies = T) )
suppressMessages(sapply(pkg, require, character.only = T) )
invisible(suppressMessages(sapply(pkg, require, character.only = T) ))
invisible(suppressMessages(sapply(pkg, require, character.only = T) ))
source('C:/Users/brend/Mega/R Scripts/bpn_packages/sourceR/sourceR/R/source_packages.R')
install.packages(new.pkg, dependencies = T)
install.packages(new.pkg, dependencies = T)
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
pkg = c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse")
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
install.packages(new.pkg, dependencies = T)
suppressMessages(install.packages(new.pkg, dependencies = T))
sapply(pkg, require, character.only = T)
suppressMessages(sapply(pkg, require, character.only = T))
invisible(sapply(pkg, require, character.only = T))
this_script = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
source(file.path("R","sourceR.R"));sourceR(); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
source(file.path("R","sourceR.R"));sourceR(); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
source_packages = function(pkg, show_loaded_packages = T, show_package_processes = F) {
new.pkg = pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
if(show_package_processes){
install.packages(new.pkg, dependencies = T)
} else {
suppressMessages(install.packages(new.pkg, dependencies = T))
}
if (show_loaded_packages) {
sapply(pkg, require, character.only = T)
} else{
invisible(sapply(pkg, require, character.only = T))
} # end of: don't show loaded pkgs
}
source(file.path("R","sourceR.R"));sourceR(); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
here::i_am(this_script);here()%T>%assign("wd",.,envir=.GlobalEnv);setwd(wd)
this_script = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
source(file.path("R","sourceR.R"));sourceR(); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
here::i_am(this_script);here()%T>%assign("wd",.,envir=.GlobalEnv);setwd(wd)
here()
i_am(this_script)
this_file = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
source(file.path("R","sourceR.R"));sourceR(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
source(file.path("R","sourceR.R"));sourceR(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
source(file.path("R","sourceR.R"));sourceR(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
traceback()
source(file.path("R","sourceR.R"));sourceR(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
?file.path
suppressMessages(here::i_am(file.path("..", this_file) ))
this_file = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
suppressMessages(here::i_am(file.path("..", this_file) ))
this_file = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
source(file.path("R","sourceR.R"));sourceR(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
here
here()
this_file = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
source(file.path("R","sourceR.R"));sourceR(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
this_file = "sourceR.Rmd" ; options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
source(file.path("R","sourceR.R"));sourceR(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
source_packages("memuse")
memuse::Sys.meminfo()
mem = memuse::Sys.meminfo()
mem$freeram
mem$freeram %>% as.character()
mem$freeram %>%
mem$freeram
mem$freeram %>% gsub(" GiB", "",.)
mem$freeram %>% gsub(" GiB", "",.) %>% as.numeric() %>% . * 1024
mem$freeram %>% gsub(" GiB", "",.) %>% as.numeric() %>% {. * 1024}
mem$freeram %>% gsub(" GiB", "",.) %>% as.numeric() %>% round %>% {. * 1024}
mem$freeram %>% gsub(" GiB", "",.) %>% as.numeric() %>% round %>% {. * 10240}
mem$freeram %>% gsub(" GiB", "",.) %>% as.numeric() %>% round %>% {. * 10240}
mem$freeram %>% gsub(" GiB", "",.) %>% as.numeric() %>% round %>% {. * 10240}
to_use = mem$freeram %>% gsub(" GiB", "",.) %>% as.numeric() %>% round %>% {. * 10240}
to_use = mem$freeram %>% gsub(" GiB", "",.) %>% as.numeric() %>% round %>% {. * 10240} %>% paste0("-Xmx",.,"m")
to_use
options(java.parameters=c("-XX:+UseConcMarkSweepGC",to_use))
mem = memuse::Sys.meminfo() %>% .[["freeram"]] %>% gsub(" GiB", "",.) %>% as.numeric() %>% round %>% {. * 10240} %>% paste0("-Xmx",.,"m")
mem
source_packages("memuse")
mem = memuse::Sys.meminfo()
to_use = mem$freeram %>% gsub(" GiB", "", .) %>%
as.numeric() %>%
round
to_use = to_use %>% {
. * 10240
} %>% paste0("-Xmx", ., "m")
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
round
mem_unit = "GiB"
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
round
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
round %>% {. * (percent_of_total/100)}
percent_of_total = 10
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
round %>% {. * (percent_of_total/100)}
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
round %>% {. * (percent_of_total/100)} %>% round
?round
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
round %>% {. * (percent_of_total/100)} %>% round
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
round %>% {. * (percent_of_total/100)} %>% floor
only_free = T
percent_of_total = 10
mem_unit = "GiB"
round_up = T
if(round_up){rounding = base::round } else {rounding = base::floor }
source_packages("memuse")
mem = memuse::Sys.meminfo()
source_packages("memuse", show_loaded_packages = F, show_package_processes = F)
free = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
rounding
if(mem_unit = "GiB"){
free = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
rounding
if(mem_unit == "GiB"){
free = free %>% {
. * 10240   # assumes mem_unit =
}
} # else { .... other mem_units...? }
free = free %>%
paste0("-Xmx", ., "m")
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
if(mem_unit == "GiB"){ mem_unit_number = 10240}
free = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
rounding
# if(mem_unit == "GiB"){
free = free %>% {
. * mem_unit_number   # assumes mem_unit =
}
free = free * mem_unit_number
free = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
rounding
free = free * mem_unit_number
# } # else { .... other mem_units...? }
free = free %>%
paste0("-Xmx", ., "m")
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
use = use %>%
paste0("-Xmx", ., "m")
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
use = use %>%
paste0("-Xmx", ., "m")
mem_unit_multiplier = 10240
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
use = use * mem_unit_miltiplier %>%
paste0("-Xmx", ., "m")
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
use = use * mem_unit_multiplier %>%
paste0("-Xmx", ., "m")
mem_unit_multiplier = 10240
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
use = use * mem_unit_multiplier
use = use %>%
paste0("-Xmx", ., "m")
round_up = F
free = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
rounding
free = free * mem_unit_multiplier
free = free %>%
paste0("-Xmx", ., "m")
use = free
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
use = use * mem_unit_multiplier
use = use %>%
paste0("-Xmx", ., "m")
mem$totalram
mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric()
mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)}
mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
if(round_up){rounding = base::round } else {rounding = base::floor }
free = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
rounding
free = free * mem_unit_multiplier
free = free %>%
paste0("-Xmx", ., "m")
use = free
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
use = use * mem_unit_multiplier
use = use %>%
paste0("-Xmx", ., "m")
free = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() * mem_unit_multiplier
## What if the free memory rounds down to zero?
if(free > 0){
free = free * mem_unit_multiplier
} else { free = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% signif(digits = 1) * mem_unit_multiplier }
free = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% signif(digits = 1) * mem_unit_multiplier
free = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% ceiling %>% signif(digits = 1) * mem_unit_multiplier
this_file = "sourceR.Rmd" ; #options(java.parameters=c("-XX:+UseConcMarkSweepGC","-Xmx10240m"))
source(file.path("R","sourceR.R"));sourceR(); source_ram(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
mem$freeram
source_packages("memuse", show_loaded_packages = F, show_package_processes = F)
mem = memuse::Sys.meminfo()
cat("\nAllocating ", mem$freeram, "of RAM" )
free_ram = mem$freeram
cat("\nAllocating ", free_ram, "of RAM" )
free_ram = mem$freeram
free_ram
free_ram = mem$freeram %>% as.character()
free = free_ram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
rounding
cat("\nAllocating ", free_ram, "of RAM" )
cat("\nAllocating", free_ram, "of RAM" )
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
round_up = T
if(round_up){rounding = base::round } else {rounding = base::floor }
if(mem_unit == "GiB"){ mem_unit_multiplier = 10240}
mem_unit = "GiB"
if(round_up){rounding = base::round } else {rounding = base::floor }
if(mem_unit == "GiB"){ mem_unit_multiplier = 10240}
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
percent_of_total = 10
use = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
free_ram = mem$freeram %>% as.character()
percent_of_total = 15
percent_of_total = 20
mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)}
free = free * mem_unit_multiplier
free_ram = mem$freeram %>% as.character()
free = free_ram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
rounding
free = free * mem_unit_multiplier
mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)}
free = free * mem_unit_multiplier
mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)}
percent_limit = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)}
free = max(free, percent_limit)
percent_limit = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)}
free = free * mem_unit_multiplier
percent_limit = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)}
cat("\nAllocating", free_ram, "of RAM" )
percent_limit
free_ram = mem$freeram %>% as.character()
source(file.path("R","sourceR.R"));sourceR(); source_ram(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
cat("\nAllocating", percent_ram, "of RAM","\n" )
source(file.path("R","sourceR.R"));sourceR(); source_ram(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
source(file.path("R","sourceR.R"));sourceR(); source_ram(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
cat("Loading packages:", "\n")
source(file.path("R","sourceR.R"));sourceR(); source_ram(); source_wd(this_file); source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file); +
source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file); +
source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
TRUE +
+ TRUE
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
this_file = "sourceR.Rmd"
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "here", "renv", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
here()
?i_am
source_packages("here",
show_loaded_packages = F,
show_package_processes = F)
# suppressMessages(here::i_am(file.path("..", this_file) ))
suppressMessages(here::i_am(this_file ))
# here() %T>% assign("wd", ., envir = .GlobalEnv)
assign("wd", here(), envir = .GlobalEnv)
setwd(wd)
here()
wd
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
cat("Allocating", percent_ram, mem_unit,"of RAM","\n" )
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
cat("Setting working directory to", here(), "\n", "Assigning working directory to the global variable 'wd'")
cat("Setting working directory to", here(), "\n","Assigning working directory to the global variable 'wd'")
cat("Setting working directory to", here())
cat("Assigning working directory to the global variable 'wd'")
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
traceback()
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
only_free = T
percent_of_total = 20
mem_unit = "GiB"
round_up = T
if(round_up){rounding = base::round } else {rounding = base::floor }
if(isTRUE(mem_unit == "GiB")){ mem_unit_multiplier = 10240}
source_packages("memuse", show_loaded_packages = F, show_package_processes = F)
mem = memuse::Sys.meminfo()
if(only_free){
free_ram = mem$freeram %>% as.character() %>%  gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>%
rounding
free = free_ram
## What if the free memory rounds down to zero?
if(isTRUE(free > 0)){
# or what if it's greater than percent specified?
free = free * mem_unit_multiplier
percent_limit = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)}
if(free > percent_limit){ free = percent_limit ; free_ram = free}
free_ram = free
} else       {
free_ram = mem$freeram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% signif(digits = 1)
free = free_ram * mem_unit_multiplier
}
free = free %>%
paste0("-Xmx", ., "m")
use_memory = free
cat("Allocating", free_ram, mem_unit,"of RAM","\n" )
} else {
percent_ram = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
use = percent_ram * mem_unit_multiplier
use_memory = use %>%
paste0("-Xmx", ., "m")
cat("Allocating", percent_ram, mem_unit,"of RAM","\n" )
}
cat("Allocating", percent_ram%>% gsub("\\\\.[0-9]*", "",.), mem_unit,"of RAM","\n" )
cat("Allocating", free_ram%>% gsub("\\\\.[0-9]*", "",.), mem_unit,"of RAM","\n" )
cat("Allocating", free_ram %>% gsub("\\\\.[0-9]*", "",.), mem_unit,"of RAM","\n" )
cat("Allocating", free_ram %>% gsub("\\.[0-9]*", "",.), mem_unit,"of RAM","\n" )
percent_ram = mem$totalram %>% gsub(paste0(" ",mem_unit), "", .) %>%
as.numeric() %>% {. * (percent_of_total/100)} %>% rounding
use = percent_ram * mem_unit_multiplier
use_memory = use %>%
paste0("-Xmx", ., "m")
cat("Allocating", percent_ram%>% gsub("\\.[0-9]*", "",.), mem_unit,"of RAM","\n" )
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
this_file = "sourceR.Rmd" ; source(file.path("R","sourceR.R")); sourceR(); source_ram(); source_wd(this_file);
source_packages(c("dplyr", "readr", "stringr", "tidyr", "lubridate", "magrittr", "utf8", "readtext", "R.utils", "devtools", "rlang", "data.table", "xlsx", "keyring", "SPARQL", "httr", "jsonlite", "tidyverse"))
document()
wd
getwd()
document()
?round
?%>%
?filter
